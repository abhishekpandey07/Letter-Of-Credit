#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('lc-manager:server');
var http = require('http');
var https = require('https')
var jobs = require('../jobs/jobs')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
//var privateKey  = fs.readFileSync('.keys/key.pem', 'utf8');
//var certificate = fs.readFileSync('.keys/cert.pem', 'utf8');

var server = http.createServer(app);
/*var httpsServer = https.createServer({
  key: privateKey,
  cert: certificate,
  passphrase: 'f-22raptor2'
},app)*/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/*httpsServer.listen(port)
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);*/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  // adding cron routines
  jobSchedules = jobs.getJobSchedules()
  if(jobSchedules != null && jobSchedules != undefined) {
    var paymentUpdate = jobSchedules.paymentUpdate
    console.log('Next payment Update @ ' + paymentUpdate.nextInvocation())
    console.log('Next weekPayment Update @ '+ jobSchedules.weekPaymentUpdate.nextInvocation())

    console.log('Next dayExpiration Update @ ' + jobSchedules.dayExpirationUpdate.nextInvocation())
    console.log('Next weekExpiration Update @ '+ jobSchedules.weekExpirationUpdate.nextInvocation())
    console.log('Next LC Expiry Action @ '+ jobSchedules.LCExpiryAction.nextInvocation())  
  }

  
}
